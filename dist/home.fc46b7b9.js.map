{"version":3,"sources":["home.js"],"names":["faq","document","querySelector","header","hero","addEventListener","e","target","classList","contains","parent","closest","info","rotate","toggle","navFixed","entries","console","log","entry","isIntersecting","add","remove","observer","IntersectionObserver","root","threshold","observe"],"mappings":";;;;;;;;;;;;AAAA,IAAMA,GAAG,GAAGC,QAAQ,CAACC,aAAT,CAAuB,YAAvB,CAAZ,EACA;;AACA,IAAMC,MAAM,GAAGF,QAAQ,CAACC,aAAT,CAAuB,iBAAvB,CAAf;AACA,IAAME,IAAI,GAAGH,QAAQ,CAACC,aAAT,CAAuB,OAAvB,CAAb,EAEA;;AAEAF,GAAG,CAACK,gBAAJ,CAAqB,OAArB,EAA8B,UAAAC,CAAC,EAAI;AACjC;AAEA;AACA;AACA;AAEA,MACEA,CAAC,CAACC,MAAF,CAASC,SAAT,CAAmBC,QAAnB,CAA4B,gBAA5B,KACAH,CAAC,CAACC,MAAF,CAASC,SAAT,CAAmBC,QAAnB,CAA4B,OAA5B,CAFF,EAGE;AACA;AACA,QAAMC,MAAM,GAAGJ,CAAC,CAACC,MAAF,CAASI,OAAT,CAAiB,WAAjB,CAAf;AACA,QAAMC,IAAI,GAAGF,MAAM,CAACR,aAAP,CAAqB,OAArB,CAAb;AACA,QAAMW,MAAM,GAAGH,MAAM,CAACR,aAAP,CAAqB,QAArB,CAAf;AACAU,IAAAA,IAAI,CAACJ,SAAL,CAAeM,MAAf,CAAsB,QAAtB;AACAD,IAAAA,MAAM,CAACL,SAAP,CAAiBM,MAAjB,CAAwB,QAAxB;AACD;AACF,CAlBD,GAoBA;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAAAC,OAAO,EAAI;AAC1B;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;;AACA,gCAAgBA,OAAhB;AAAA,MAAOG,KAAP;;AACAF,EAAAA,OAAO,CAACC,GAAR,CAAYC,KAAZ,EAJ0B,CAM1B;;AACA,MAAI,CAACA,KAAK,CAACC,cAAX,EAA2B;AACzBjB,IAAAA,MAAM,CAACK,SAAP,CAAiBa,GAAjB,CAAqB,OAArB;AACD,GAFD,MAEO;AACLlB,IAAAA,MAAM,CAACK,SAAP,CAAiBc,MAAjB,CAAwB,OAAxB;AACD;AACF,CAZD;;AAcA,IAAMC,QAAQ,GAAG,IAAIC,oBAAJ,CAAyBT,QAAzB,EAAmC;AAClDU,EAAAA,IAAI,EAAE,IAD4C;AAElDC,EAAAA,SAAS,EAAE;AAFuC,CAAnC,CAAjB;AAKAH,QAAQ,CAACI,OAAT,CAAiBvB,IAAjB","file":"home.fc46b7b9.js","sourceRoot":"..","sourcesContent":["const faq = document.querySelector(\".questions\");\r\n// const questions = document.querySelectorAll('.question');\r\nconst header = document.querySelector(\".primary-header\");\r\nconst hero = document.querySelector(\".hero\");\r\n\r\n// question accordian\r\n\r\nfaq.addEventListener(\"click\", e => {\r\n  // questions.forEach(question => {\r\n\r\n  //     question.querySelector('.info').classList.add('hidden');\r\n  //     question.querySelector('.arrow').classList.add('rotate');\r\n  // });\r\n\r\n  if (\r\n    e.target.classList.contains(\"question-title\") ||\r\n    e.target.classList.contains(\"arrow\")\r\n  ) {\r\n    // const parent = e.target.parentElement.parentElement;\r\n    const parent = e.target.closest(\".question\");\r\n    const info = parent.querySelector(\".info\");\r\n    const rotate = parent.querySelector(\".arrow\");\r\n    info.classList.toggle(\"hidden\");\r\n    rotate.classList.toggle(\"rotate\");\r\n  }\r\n});\r\n\r\n// fixed nav intersection observer\r\n\r\nconst navFixed = entries => {\r\n  // entries gives an array so i used destructuring to get a single entry so that the function can work right.\r\n  console.log(entries);\r\n  const [entry] = entries;\r\n  console.log(entry);\r\n\r\n  // it will run at least once the moment it is observer is initialized so i put the a check in place.\r\n  if (!entry.isIntersecting) {\r\n    header.classList.add(\"fixed\");\r\n  } else {\r\n    header.classList.remove(\"fixed\");\r\n  }\r\n};\r\n\r\nconst observer = new IntersectionObserver(navFixed, {\r\n  root: null,\r\n  threshold: 0,\r\n});\r\n\r\nobserver.observe(hero);\r\n"]}